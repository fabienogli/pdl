// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	chunker "github.com/fabienogli/pdl/chunker"

	mock "github.com/stretchr/testify/mock"
)

// ChunkDownloader is an autogenerated mock type for the chunkDownloader type
type ChunkDownloader struct {
	mock.Mock
}

// Download provides a mock function with given fields: ctx, url, fileName, chunks
func (_m *ChunkDownloader) Download(ctx context.Context, url string, fileName string, chunks []chunker.Chunk) ([]chunker.Chunk, error) {
	ret := _m.Called(ctx, url, fileName, chunks)

	var r0 []chunker.Chunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []chunker.Chunk) ([]chunker.Chunk, error)); ok {
		return rf(ctx, url, fileName, chunks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []chunker.Chunk) []chunker.Chunk); ok {
		r0 = rf(ctx, url, fileName, chunks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chunker.Chunk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []chunker.Chunk) error); ok {
		r1 = rf(ctx, url, fileName, chunks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChunkDownloader creates a new instance of ChunkDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChunkDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChunkDownloader {
	mock := &ChunkDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
